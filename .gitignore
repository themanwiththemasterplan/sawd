if game.PlaceId ~= 8206123457 and game.PlaceId == 8204899140 then
	-->> Services >>
	local Players = cloneref(game:GetService("Players"))
	local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"))

	-->> Variables >>
	local LocalPlayer = Players.LocalPlayer

	-->> Utilities
	local AC_STRING = nil
	local HandshakeArguments = nil
	local HandshakeRemote = ReplicatedStorage:WaitForChild("Remotes"):FindFirstChild("CharacterSoundEvent")
	local LastCheck = nil
	local LastCheckTwo = nil

	-->> Functions >>
	local ReplicateHandshake = function()
		if AC_STRING ~= nil and HandshakeArguments then
			return HandshakeRemote:fireServer(AC_STRING, HandshakeArguments, nil)
		end
	end

	-->> Hooks >>
	local OldInfo
	OldInfo = hookfunction(debug.info, function(Level, Stuff)
		if Level == 2 and Stuff == "s" then
			return "LocalScript"
		end

		return OldInfo(Level, Stuff)
	end)

	local OldCheck
	OldCheck = hookfunction(getrawmetatable(game).__namecall, function(Self, ...)
		local Method = getnamecallmethod()
		local Args = {...}

		if not checkcaller() and Method == "fireServer" and Self == HandshakeRemote then
			if Args[1] and string.find(Args[1], "AC") then
				if Args[2] == "error" then
					return
				end

				if Args[2] == nil then
					return
				end

				local Table = getrawmetatable(Args[2]).__tostring
				LastCheckTwo = tick()

				AC_STRING = Args[1]

				if type(Args[2]) == "table" then
					if not HandshakeArguments then
						HandshakeArguments = Args[2]
					else
						return coroutine.yield()
					end
				end
			end
		end

		return OldCheck(Self, ...)
	end)

	for Index, Function in next, getgc() do
		if type(Function) == "function" and getinfo(Function).source:find("ReplicatedFirst.LocalScript") then
			hookfunction(Function, function()

			end)
		end
	end

	task.wait(3)

	-->> Grab Shuffle Function >>
	for Index, Function in next, getgc() do
		if type(Function) == "function" then
			if getinfo(Function).source:find("PlayerModule.LocalScript") then
				if getinfo(Function).numparams == 7 then
					local Shuffle
					Shuffle = hookfunction(Function, function(...)
						local Args = {...}

						if Args[2] ~= 760 and Args[3] ~= 760 and Args[4] ~= 771 and Args[5] ~= 665 and Args[6] ~= 898 or Args[2] ~= 655 and Args[3] ~= 775 and Args[4] ~= 724 and Args[5] ~= 633 and Args[6] ~= 891 and Args[2] ~= 660 and Args[3] ~= 759 and Args[4] ~= 751 and Args[5] ~= 863 and Args[6] ~= 771 then
							return coroutine.yield()
						end
				
						LastCheck = tick()
				
						return Shuffle(...)
					end)
				end
			end
		end
	end
--asset
	task.spawn(function()
		while task.wait(0.4) do
			if LastCheck ~= nil and (LastCheck - tick()) >= 10 then
				warn("Bypass timed out.")
				task.wait(20)
				LocalPlayer:Kick("")
				game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt.TitleFrame.ErrorTitle.Text = "Bypass Error."
				game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt.MessageArea.ErrorFrame.ErrorMessage.Text = "Bypass timed out."
				return
			end

			if LastCheckTwo ~= nil and (LastCheckTwo - tick()) >= 10 then
				warn("Bypass timed out.")
				task.wait(20)
				LocalPlayer:Kick("")
				game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt.TitleFrame.ErrorTitle.Text = "Bypass Error."
				game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt.MessageArea.ErrorFrame.ErrorMessage.Text = "Bypass timed out."
				return
			end
		end
	end)

	task.spawn(function()
		while task.wait(0.4) do
			if AC_STRING and HandshakeArguments then
				HandshakeRemote:fireServer(AC_STRING, HandshakeArguments, nil)
			end
		end
	end)
end

task.wait()

print("██╗░░░░░░█████╗░░█████╗░██████╗░███████╗██████╗░  ██╗")
print("██║░░░░░██╔══██╗██╔══██╗██╔══██╗██╔════╝██╔══██╗  ██║")
print("██║░░░░░██║░░██║███████║██║░░██║█████╗░░██║░░██║  ██║")
print("██║░░░░░██║░░██║██╔══██║██║░░██║██╔══╝░░██║░░██║  ╚═╝")
print("███████╗╚█████╔╝██║░░██║██████╔╝███████╗██████╔╝  ██╗")
print("╚══════╝░╚════╝░╚═╝░░╚═╝╚═════╝░╚══════╝╚═════╝░  ╚═╝")


print("full vibrant bypass made by vpn")
